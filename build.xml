<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="wordpress-setup" default="build">

  <property name="toolsdir" value="${basedir}/vendor/bin/"/>

  <property name="project.type" value="plugins" />
  <property name="db.host" value="127.0.0.1" />
  <property name="db.user" value="wordpress_setup" />
  <property name="db.name" value="wordpress_setup" />
  <property name="db.pass" value="password" />
  <property name="project.version" value="1.0.0" />

  <target name="build"
      depends="prepare,lint, grunt,copy-files,replace-placeholders"
      description="The default target. This does everything needed to build the entire project">
  </target>

  <target name="build-full"
      depends="composer,npm,prepare,lint,grunt,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,phpdox,copy-files,replace-placeholders"
      description="The default target. This does everything needed to build the entire project">
  </target>

  <target name="composer" description="runs the composer update">
    <exec executable="composer" dir="${basedir}">
      <arg value="update" />
    </exec>
  </target>

  <target name="npm" description="install of the node modules">
    <exec executable="npm" dir="${basedir}" failonerror="true">
      <arg value="install" />
    </exec>
  </target>

  <target name="copy-files" description="copy files to build location">

    <!-- copy the wordpress directory -->
    <copy todir="${basedir}/build/html/">
      <fileset dir="${basedir}/wordpress/">
        <exclude name="**/*.json" />
        <exclude name="**/*.txt" />
        <exclude name="**/readme.html" />
      </fileset>
    </copy>

    <!-- copy the source directory -->
    <copy todir="${basedir}/build/html/wp-content/${project.type}/${ant.project.name}">
      <fileset dir="${basedir}/src/">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <!-- copy the config file -->
    <copy file="${basedir}/wp-config.php" tofile="${basedir}/build/html/wp-config.php"/>

    <!-- only packaging up the theme. We could package up the whole site though ;) -->
    <zip destfile="${basedir}/build/dist/${ant.project.name}.zip" basedir="${basedir}/src/" />
  </target>

  <target name="replace-placeholders" description="make necessary replacements to placeholders">
    <replace file="${basedir}/build/html/wp-config.php" token="{DB_NAME}" value="${db.name}"/>
    <replace file="${basedir}/build/html/wp-config.php" token="{DB_HOST}" value="${db.host}"/>
    <replace file="${basedir}/build/html/wp-config.php" token="{DB_USER}" value="${db.user}"/>
    <replace file="${basedir}/build/html/wp-config.php" token="{DB_PASS}" value="${db.pass}"/>
    <replace dir="${basedir}/build/html" token="{ID}" value="${project.version}"/>
    <replace dir="${basedir}/build/html" token="{PROJECT}" value="${ant.project.name}"/>
  </target>

  <target name="build-parallel"
    depends="prepare,lint,tools-parallel,phpunit,phpdox"
    description=""/>

  <target name="tools-parallel" description="Run tools in parallel">
    <parallel threadCount="2">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>
      <antcall target="phpcpd-ci"/>
      <antcall target="phpcs-ci"/>
      <antcall target="phploc-ci"/>
    </parallel>
  </target>

  <target name="clean" unless="clean.done" description="Cleanup build artifacts">
    <delete dir="${basedir}/build/api"/>
    <delete dir="${basedir}/build/coverage"/>
    <delete dir="${basedir}/build/logs"/>
    <delete dir="${basedir}/build/pdepend"/>
    <delete dir="${basedir}/build/phpdox"/>
    <delete file="${basedir}/build/dist/power-posts.zip" />
    <property name="clean.done" value="true"/>
  </target>

  <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
    <mkdir dir="${basedir}/build/api"/>
    <mkdir dir="${basedir}/build/coverage"/>
    <mkdir dir="${basedir}/build/logs"/>
    <mkdir dir="${basedir}/build/pdepend"/>
    <mkdir dir="${basedir}/build/phpdox"/>
    <property name="prepare.done" value="true"/>
  </target>

  <target name="lint" description="Perform syntax check of sourcecode files">
    <apply executable="php" failonerror="true">
      <arg value="-l" />

      <fileset dir="${basedir}/src">
        <include name="**/*.php" />
        <modified />
      </fileset>

      <fileset dir="${basedir}/tests">
        <include name="**/*.php" />
        <modified />
      </fileset>
    </apply>
  </target>

  <target name="grunt" description="Perform all of the grunt tasks for the client side code">
    <exec executable="grunt" failonerror="true" />
  </target>

  <target name="phploc"
      description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
    <exec executable="${toolsdir}phploc">
      <arg value="--count-tests" />
      <arg path="${basedir}/src" />
      <arg path="${basedir}/tests" />
    </exec>
  </target>

  <target name="phploc-ci"
      depends="prepare"
      description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phploc">
      <arg value="--count-tests" />
      <arg value="--log-csv" />
      <arg path="${basedir}/build/logs/phploc.csv" />
      <arg value="--log-xml" />
      <arg path="${basedir}/build/logs/phploc.xml" />
      <arg path="${basedir}/src" />
      <arg path="${basedir}/tests" />
    </exec>
  </target>

  <target name="pdepend"
      depends="prepare"
      description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}pdepend">
      <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
      <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
      <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
      <arg path="${basedir}/src" />
    </exec>
  </target>

  <target name="phpmd"
      description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpmd">
      <arg path="${basedir}/src" />
      <arg value="text" />
      <arg path="${basedir}/build/phpmd.xml" />
    </exec>
  </target>

  <target name="phpmd-ci"
      depends="prepare"
      description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpmd">
      <arg path="${basedir}/src" />
      <arg value="xml" />
      <arg path="${basedir}/build/phpmd.xml" />
      <arg value="--reportfile" />
      <arg path="${basedir}/build/logs/pmd.xml" />
    </exec>
  </target>

  <target name="phpcs"
      description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpcs">
      <arg value="--standard=PSR2" />
      <arg value="--extensions=php" />
      <arg value="--ignore=autoload.php" />
      <arg path="${basedir}/src" />
      <arg path="${basedir}/tests" />
    </exec>
  </target>

  <target name="phpcs-ci"
      depends="prepare"
      description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpcs" output="/dev/null">
      <arg value="--report=checkstyle" />
      <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
      <arg value="--standard=PSR2" />
      <arg value="--extensions=php" />
      <arg value="--ignore=autoload.php" />
      <arg path="${basedir}/src" />
    </exec>
  </target>

  <target name="phpcpd"
      description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpcpd">
      <arg path="${basedir}/src" />
    </exec>
  </target>

  <target name="phpcpd-ci"
      depends="prepare"
      description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpcpd">
      <arg value="--log-pmd" />
      <arg path="${basedir}/build/logs/pmd-cpd.xml" />
      <arg path="${basedir}/src" />
    </exec>
  </target>

  <target name="phpunit"
      depends="prepare"
      description="Run unit tests with PHPUnit">
    <exec executable="${toolsdir}phpunit" failonerror="true">
      <arg value="--configuration"/>
      <arg path="${basedir}/build/phpunit.xml"/>
    </exec>
  </target>

  <target name="phpdox"
      depends="phploc-ci,phpcs-ci,phpmd-ci"
      description="Generate project documentation using phDox">
    <exec executable="${toolsdir}phpdox" dir="${basedir}/build" />
  </target>
</project>
